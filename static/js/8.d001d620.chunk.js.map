{"version":3,"sources":["containers/Dashboard/Web3SignIn/Web3SignIn.js","containers/Dashboard/Web3SignIn/logic.js","containers/Dashboard/Web3SignIn/index.js","containers/Dashboard/Web3SignIn/styles.js"],"names":["Web3SignIn","useWeb3React","library","account","activate","active","error","deactivate","language","useSelector","state","settings","walletID","walletAddress","dispatch","useDispatch","setWalletID","useCallback","_walletID","settingsSetWalletID","setWalletAddress","_walletAddress","settingsSetWalletAddress","secureSwitchWallet","settingsLogout","useState","addressWatchOnly","setAddressWatchOnly","useEffect","onActivate","onSetWalletID","NetworkConnector","urls","1","catch","InjectedConnector","supportedChainIds","LedgerConnector","url","TrezorConnector","manifestAppUrl","manifestEmail","WalletConnectConnector","rpc","AuthereumConnector","chainId","FortmaticConnector","apiKey","PortisConnector","dAppId","networks","SquarelinkConnector","clientId","TorusConnector","tryToOpenWalletIfNotActive","onSetWalletAddress","isLoading","value","saveAddressWalletOrENS","messages","languageProvider","exact","from","to","onSelectWallet","walletLoading","onUpdateWalletAddress","withStyles","theme","btnTranslate","position","right","spacing","top","zIndex"],"mappings":"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","file":"static/js/8.d001d620.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useWeb3React } from '@web3-react/core';\nimport { Redirect } from 'react-router-dom';\n\nimport extProps from './propTypes';\nimport languageProvider from '../../../translations';\nimport { Web3SignInGrid } from '../../../components';\nimport { settingsLogout, settingsSetWalletAddress, settingsSetWalletID } from '../../../redux/features/settings/action';\nimport { saveAddressWalletOrENS, tryToOpenWalletIfNotActive } from './logic';\n\n/*\n *\n * Sign in with web3 wallet or read only with RPC\n * Save in localStorage the wallet used\n *\n */\n\nconst Web3SignIn = () => {\n  const {\n    library, account, activate, active, error, deactivate,\n  } = useWeb3React();\n  const language = useSelector((state) => state.settings.language);\n  const walletID = useSelector((state) => state.settings.walletID);\n  const walletAddress = useSelector((state) => state.settings.walletAddress);\n  const dispatch = useDispatch();\n  const setWalletID = useCallback((_walletID) => dispatch(\n    settingsSetWalletID(_walletID),\n  ), [dispatch]);\n  const setWalletAddress = useCallback((_walletAddress) => dispatch(\n    settingsSetWalletAddress(library, _walletAddress),\n  ), [dispatch, library]);\n  const secureSwitchWallet = useCallback((_walletID) => dispatch(\n    settingsLogout(deactivate, _walletID),\n  ), [dispatch, deactivate]);\n  const [addressWatchOnly, setAddressWatchOnly] = useState('');\n\n  useEffect(() => {\n    tryToOpenWalletIfNotActive(active, walletID, activate, setWalletID);\n  }, [active, walletID, activate, setWalletID]);\n\n  useEffect(() => {\n    if (error) setWalletID(0);\n  }, [error, setWalletID]);\n\n  useEffect(() => {\n    saveAddressWalletOrENS(library, walletAddress, addressWatchOnly, account, setWalletAddress);\n  }, [library, walletAddress, addressWatchOnly, account, setWalletAddress]);\n\n  const messages = languageProvider[language];\n\n  if (!!walletAddress.value && !!library) return (<Redirect exact from=\"/login\" to=\"/\" />);\n\n  return (\n    <Web3SignInGrid\n      messages={messages}\n      onSelectWallet={secureSwitchWallet}\n      walletLoading={walletID}\n      onUpdateWalletAddress={setAddressWatchOnly}\n      isLoading={walletAddress.isLoading}\n    />\n  );\n};\n\nWeb3SignIn.propTypes = extProps;\n\nexport default Web3SignIn;\n","import { InjectedConnector } from '@web3-react/injected-connector';\nimport { LedgerConnector } from '@web3-react/ledger-connector';\nimport { TrezorConnector } from '@web3-react/trezor-connector';\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\nimport { AuthereumConnector } from '@web3-react/authereum-connector';\nimport { FortmaticConnector } from '@web3-react/fortmatic-connector';\nimport { PortisConnector } from '@web3-react/portis-connector';\nimport { SquarelinkConnector } from '@web3-react/squarelink-connector';\nimport { TorusConnector } from '@web3-react/torus-connector';\nimport { NetworkConnector } from '@web3-react/network-connector';\n\n// Activate wallet if not web3 hook not already active\nexport const tryToOpenWalletIfNotActive = (active, walletID, onActivate, onSetWalletID) => {\n  if (!active) {\n    switch (walletID) {\n      case 1: // Read-only\n        onActivate(new NetworkConnector({ urls: { 1: 'https://mainnet.infura.io/v3/740f8a307aa34141a298506577f063bc' } }))\n          .catch(() => onSetWalletID(0));\n        break;\n      case 2: // Metamask\n        onActivate(new InjectedConnector({ supportedChainIds: [1, 3, 4, 5, 42] }))\n          .catch(() => onSetWalletID(0));\n        break;\n      case 3:\n        onActivate(new LedgerConnector({ supportedChainIds: [1], url: 'https://mainnet.infura.io/v3/740f8a307aa34141a298506577f063bc' }))\n          .catch(() => onSetWalletID(0));\n        break;\n      case 4:\n        onActivate(new TrezorConnector({\n          manifestAppUrl: 'https://stake.o2b.dev',\n          manifestEmail: 'nolan@o2b.dev',\n          supportedChainIds: [1],\n          url: 'https://mainnet.infura.io/v3/740f8a307aa34141a298506577f063bc',\n        }))\n          .catch(() => onSetWalletID(0));\n        break;\n      case 5:\n        onActivate(new WalletConnectConnector({ rpc: { 1: 'https://mainnet.infura.io/v3/740f8a307aa34141a298506577f063bc' } }))\n          .catch(() => onSetWalletID(0));\n        break;\n      case 6:\n        onActivate(new AuthereumConnector({ chainId: 1 }))\n          .catch(() => onSetWalletID(0));\n        break;\n      case 7:\n        onActivate(new FortmaticConnector({ apiKey: 'pk_live_01129497FC783931', chainId: 1 }))\n          .catch(() => onSetWalletID(0));\n        break;\n      case 8:\n        onActivate(new PortisConnector({ dAppId: '0e834d4c-cea9-4770-9c52-679fe5580bad', networks: [1] }))\n          .catch(() => onSetWalletID(0));\n        break;\n      case 9:\n        onActivate(new SquarelinkConnector({ clientId: '', networks: [1] }))\n          .catch(() => onSetWalletID(0));\n        break;\n      case 10:\n        onActivate(new TorusConnector({ chainId: 1 }))\n          .catch(() => onSetWalletID(0));\n        break;\n      default: // No wallet\n        onSetWalletID(0);\n        break;\n    }\n  }\n};\n\n// Set and save wallet address, if read-only resolve ENS\nexport const saveAddressWalletOrENS = (library, walletAddress, addressWatchOnly,\n  account, onSetWalletAddress) => {\n  if (!!library && !walletAddress.isLoading) {\n    if (!!addressWatchOnly\n      && walletAddress.value !== addressWatchOnly) onSetWalletAddress(addressWatchOnly);\n    if (!!account && walletAddress.value !== account) onSetWalletAddress(account);\n  }\n};\n","import { withStyles } from '@material-ui/core/styles';\nimport styles from './styles';\nimport Web3SignIn from './Web3SignIn';\n\nexport default withStyles(styles)(Web3SignIn);\n","export default (theme) => ({\n  btnTranslate: {\n    position: 'fixed !important',\n    right: theme.spacing(2),\n    top: theme.spacing(2),\n    zIndex: 55,\n  },\n});\n"],"sourceRoot":""}